后端 backend

scene : 所有游戏角色(game actors)的生存之所，所有动态游戏对象都是角色(actors)，不管是或者的活着的生物还是死亡的任何类型的场景物件。后端角色是相对于游戏世界的抽象显示

ai：actor的大脑，指挥actor怎么生存，通过各种目标驱动，actor的大脑一直处于一个状态并通过已接触过的对手的已记录记忆决策

director ：类似电影导演，但同时有多个专职导演。有专职碰撞检测、构建视角、使用库存和场景物件、观察血量、应用物理等等

navigation：角色寻路

net：事件驱动与所有客户端的通讯。多人在线则使用真正的网络，单人模式则使用一个内存模型。不知道scene，只通过directors 或者AI类接收事件

management：游戏规则和在运行时基于预定义的构建计划创建新角色的工厂

server：聚集网络服务的游戏服务器，连接客户端和directors

前端 frontend (MPV框架),前端是木偶，后端操控木偶

scene：

controller：根据服务器事件移动木偶，玩家输入和游戏物理，负责接收服务器事件与发送玩家输入

view:场景木偶的可视化表现，可以不同方式表现

input：接收玩家输入并传递给conroller

net：与游戏服务器的通讯，发送、接收事件，下载游戏资源。具体实现允许单机通过事件与虚拟机(VM)，网络通过TCP通讯

sound

gdx：第三方库，光照、粒子、贴图等图形底层

共享 shared

前后端都有用的任务东西
例如，前后端应用相同的角色移动和物理
自然，两者通过事件驱动


						敏捷软件开发
拙劣设计的症状：
僵化性 -- 设计难以改变
脆弱性 -- 设计易于遭到破坏
顽固性 -- 设计难以重用
粘滞性 -- 难以做正确的事情
不必要的复杂性 -- 过分设计
不必要的重复 -- 滥用鼠标进行复制、粘贴
晦涩性 -- 混乱的表达

消除手法 --面向对象设计原则

单一职责原则(SRP) -- 一个类应该只有一个发生变化的原因，如果你能够想到多于一个的动机去改变一个类，那么这个类就具有多于一个的职责，仅当发生变化时，变化的轴线才具有实际意义

开放-封闭原则(OCP) -- 软件实体（类、模块、函数）应该是可以扩展的，但是不可修改。设计人员必须对于他设计的模块应该对哪些变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化，基于对用户和应用领域的了解来判断各种变化的可能性。创建抽象是要花费开发时间和精力的。同事，哪些抽象也增加了软件设计的复杂性。开发人员有能力处理的抽象数量也是有限的。所以，希望把OCP的应用限定在可能发生的变化上（等到变化发生时才采取行动）。只受一次愚弄：“愚弄我一次，应感羞愧的是你。再次愚弄我，应感羞愧的是我。” 拒绝不成熟的抽象和抽象本身一样重要

Liskov替换原则(LSP) -- 子类型(subtype)必须能够替换掉它们的基类型(base type)。替换性质：若对类型S的每一个对象o1，都存在一个类型T的对象o2，使得在所有针对T编写的程序P中，用o1替换o2后，程序P的行为功能不变，则S是T的子类型。对于LSP的违反也潜在地违反了OCP。is a是关于行为的，OOD中IS-A关系是就行为而言的，行为方式是可以进行合理假设的，是客户程序所依赖的

依赖倒置原则 -- 高层模块不应该依赖于低层模块，二者都应该依赖于抽象;抽象不应该依赖于细节，细节应该依赖与抽象

接口隔离原则 -- 不应该强迫客户程序依赖并未使用的方法(未遵守则导致程序之间的耦合性增加，接口改变时将难于处理)
	1.使用委托分离接口
	2.使用多重继承分离接口

内聚性：一个模块的组成元素之间的功能相关性

类图：
	组合：一个所有物实例不能同时被两个所有者拥有；所有者负责所有物的生存期(一起析构，一起复制)
	
	关联衍型：create、local(局部域创建)、parameter(传参形式)、delegate(调用转交)

	内嵌类：

	关联类：

	关联修饰符：

咖啡的启示：
	后退一步，把问题的本质和其细节分离
	关联是对象之间消息发送的路径
	关注用例
	依赖倒置，高层关注策略(运转)，底层关注实现细节

MONOSTATE模式：多个实例共享静态变量
	好处：	透明性
		可派生性
		多态性
		构造和析构均有良好定义
	代价：
		不可转换性:不能通过派生把常规类转换成MONOSTATE类
		效率问题：因为其是真正的对象，所以会导致许多的创建和析构。这些操作通常就很大的开销
		内存占用：即使从未使用MONOSTATE，它的变量也要占据内存空间
		平台局限性：MONOSTATE不能跨多个CLR或者多个平台工作

抽象的定义：本质部分的放大，无关紧要部分的去除

系统设计：
	通过把用户故事详细阐述成用例，并在这些用例中搜寻抽象，创建出系统的类型
	思考设计师重要的。但是，以小步、增量的方式思考设计则是至关重要的。考虑得太多要比考虑得太少更为糟糕
	从用例搜寻设计，简单的用例分析可以提供丰富的信息以及系统设计的洞察力
	分步设计，逐渐整合修改
	方法多样时，为避免随意性，可推迟设计决策，也许来自系统其他部分的约束会促使我们做出某种选择
	从需求挖掘抽象

算法消耗需关注时间复杂度和空间复杂度，如时间复杂度相同的堆排序和快速排序，但是快排用得更广泛，因其比较相邻元素，所以内存连续，符合局部应用性原理，利于CPU缓存命中

组件的内聚性原则：粒度
 	1.重用-发布等价原则(Reuse-Release Equivalence Principle, REP)
		重用的粒度就是发布的粒度，所重用的任务东西都必须同事被发布和跟踪。由于重用性是基于逐渐的，所以可重用的组件必须包含可重用的类
		一个组件中的类要么都是可重用的，要么都不是可重用的。我们不希望用户发现组件所包含的类中，一些是他所需要的，另一些对他却完全不适合
	2.共同重用原则(Common-Reuse Principle, CRP)
		一个组件中的所有类应该是共同重用的。如果重用了组件中的一个类，那么就要重用组建中的所有类
		确信放入一个组件中的所有类是不可分开的，仅仅依赖于其中一部分的情况是不可能的。否则将进行不必要的重新验证和重新部署，并且会白费相当大的努力。相互之间没有紧密联系的类不应该在同一个组件中
	3.共同封闭原则(Common-Closure Principle, CCP)
		组件中的所有类对于同一种性质的变化应该是共同封闭的。一个变化若对一个封闭的组件产生影响，则将对该组件中的所有类产生影响，而对于其他组件则不造成任何影响
		这是单一职责原则对于组件的重新规定。正如SRP规定的一个类不应该包含多个引起变化的原因那样，CCP规定了一个组件不应该包含多个引起变化的原因
		把可能由于同样的原因而更改的所有类共同聚集在同一个地方，这样做回减少软件的发布、重新验证、重新发行的工作量

	组件内聚性总结：在选择要共同组织到组件中的类时，必须要考虑可重用性与可开发性(developability)之间的相反作用力

组件的耦合性原则：稳定性
	1.无环依赖原则(Acyclic-Dependencies Principle, ADP)
		在组件的依赖关系图中不允许存在环
		每周构建：常用在中等规模的项目中。工作方式为：在一周的前4天，所有的开发人员互不打扰，工作在各自私有的代码副本上，而不担心互相之间的集成问题。周五，他们集成进各自的更改并构建系统，这样，开发人员每周可单独工作4天，但是周五要付出巨大的集成代价
		消除依赖环：通过把开发环境划分成可发布的组件，可以解决上述问题。存在环则难以对模块进行隔离
		解除依赖环：
			1.使用依赖倒置原则
			2.新建新组件，将不同组件都依赖的类移到新组件中
		自顶向下设计与自底向上设计：
			不能再没有代码的情况下自顶向下地设计组件的结构。组件的结构是随着系统的增长、变化而逐步演化的
			组件的依赖关系结构是应用程序可构建性的映射图。这就是为何无法在项目开始时完全设计出它们的原因。同样也说明了它们为何不是严格的功能分解
	2.稳定依赖原则(Stable-Dependencies Principle, SDP)
		朝着稳定的方向进行依赖
		对于任何组件而言，如果期望它是可变的，就不应该让一个难以更改的组件依赖于它！否则，可变的组件同样也会难以更改
		
		稳定性度量：
			方法1.计算进、出该组件的依赖关系的数目
				(Ca)输入耦合度(afferent coupling):处于该组件的外部，并依赖于该组件内的类的数目
				(Ce)输出耦合度(efferent coupling):处于该组件的内部，并依赖于该组件外的类的数目
				(不稳定性I) I= Ce / (Ca + Ce)
				这个度量的取值范围是[0,1]。I=0表示该组件具有最大的稳定性。I=1表示该组件具有最大的不稳定性
				SDP规定一个组件的I度量值应该大于它所依赖的组件的I度量值。也就是说，I度量值应该顺着依赖的方向减少
		高层设计的位置
			把封装系统高层设计的软件放进稳定的组件中(I=0)。不稳定的组件(I=1)中应该只包含那些很可能会改变的软件
	3.稳定抽象原则(Stable-Abstractions Principle, SAP)
		组件的抽象程度应该与其稳定程度一致
		该原则把组件的稳定性和抽象性联系起来。它规定，一个稳定的组件应该也是抽象的，这样它的稳定性就不会使其无法扩展。另一方面，它规定，一个不稳定的组件应该是具体的，因为它的不稳定性使得其内部的具体代码易于更改
		SAP和SDP结合在一起就形成了组件的DIP原则

		抽象性度量：
			A度量值是一个测量组件抽象程度的度量标准，组件中抽象类的数目和全部内的数目的比值
			Nc -- 组件中类的总数
			Na -- 组件中的抽象类的数目
			A -- 抽象性 A = Na / Nc 取值范围[0,1]。0意味着组件中没有任何抽象类。1意味着组件中只包含抽象类
		到主序列的距离
			D -- 距离 D=|A+I-1| / 2开根 取值范围 [0, ≈0.707]
			D` -- 规范化的距离 D` = |A+I-1|

	一个组件中的类应该是内聚的。这意味着他们之间互相依赖，很难轻易、合理地把它们分开
	类不仅要一同封闭，而且按照REP(重用-发布等价原则)，它们也应该一同重用

	Tom DeMarco说过:无法控制的东西就无法管理，无法测量的东西就无法控制
	要想成为高效的软件工程师或者软件管理者，必须要能够控制软件开发的实践。如果没有测量它，无论如何都无法控制它

	度量值：
		H(关系内聚性)可以表示为组件中每个类平均的内部关系数目。用R来表示属于组件内部的类关系数目(也就是说，和组件外部的类没有联系)。用N表示组件内类的总数。公式中额外的1是为了避免在N=1时H=0。它表示了组件和它的所有类之间的关系 H = (R + 1) / N

观察者(OBSERVER)模式:
	推模型：Subject把数据推向Observer
	拉模型：Subject通知更新，Observer调取数据
	要选择哪种模型完全取决于被观察对象的复杂性。如果被观察对象比较复杂，并且观察者需要一个提示，那么推模型是合适的。如果被观察的对象比较简单，那么拉模型就很合适。

适配器(ADAPTER)模式
	类形式
	对象形式

代理(PROXY)模式：
	有助于我们在跨越这些障碍的同时，仍然保持程序关注于本身要解决的问题
	关注点分离

TABLE DATA GATEWAY
	提供 足够的隔离但是有没有PROXY模式的代价。这个模式也成为数据访问对象(DAO),它针对我们希望存储到数据库中的每种类型的对象都提供一个专门的FACADE(外观)

VISITOR系列模式允许在不更改类层次结构的情况下向其中增加新方法
该系列中的模式如下：
	VISITOR
	ACYCLIC VISITOR
	DECORATOR
	EXTENSION OBJECT
	双重分发(dual dispatch，双分派)的技术，这项技术是VISITOR模式的核心机制

FSM(有限状态机)：
	构建方式
		状态迁移表(初始状态、目标状态、事件类型、事件处理委托)

		STATE模式

	应用：
		GUI
		分布式处理，如文件传输,把打包分成小包发送
	